// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/loan_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/ferdikurniawan/loan-service/internal/entity"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockLoanService is a mock of LoanService interface.
type MockLoanService struct {
	ctrl     *gomock.Controller
	recorder *MockLoanServiceMockRecorder
}

// MockLoanServiceMockRecorder is the mock recorder for MockLoanService.
type MockLoanServiceMockRecorder struct {
	mock *MockLoanService
}

// NewMockLoanService creates a new mock instance.
func NewMockLoanService(ctrl *gomock.Controller) *MockLoanService {
	mock := &MockLoanService{ctrl: ctrl}
	mock.recorder = &MockLoanServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoanService) EXPECT() *MockLoanServiceMockRecorder {
	return m.recorder
}

// CreateLoan mocks base method.
func (m *MockLoanService) CreateLoan(ctx context.Context, loanRequest entity.LoanSubmitRequest) (*entity.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoan", ctx, loanRequest)
	ret0, _ := ret[0].(*entity.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoan indicates an expected call of CreateLoan.
func (mr *MockLoanServiceMockRecorder) CreateLoan(ctx, loanRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoan", reflect.TypeOf((*MockLoanService)(nil).CreateLoan), ctx, loanRequest)
}

// DisburseLoan mocks base method.
func (m *MockLoanService) DisburseLoan(ctx context.Context, loanDisburseRequest entity.LoanDisburseRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisburseLoan", ctx, loanDisburseRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisburseLoan indicates an expected call of DisburseLoan.
func (mr *MockLoanServiceMockRecorder) DisburseLoan(ctx, loanDisburseRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisburseLoan", reflect.TypeOf((*MockLoanService)(nil).DisburseLoan), ctx, loanDisburseRequest)
}

// GetLoanByID mocks base method.
func (m *MockLoanService) GetLoanByID(ctx context.Context, loanID uuid.UUID) (*entity.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanByID", ctx, loanID)
	ret0, _ := ret[0].(*entity.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanByID indicates an expected call of GetLoanByID.
func (mr *MockLoanServiceMockRecorder) GetLoanByID(ctx, loanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanByID", reflect.TypeOf((*MockLoanService)(nil).GetLoanByID), ctx, loanID)
}

// InvestLoan mocks base method.
func (m *MockLoanService) InvestLoan(ctx context.Context, loanInvestRequest entity.LoanInvestRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvestLoan", ctx, loanInvestRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvestLoan indicates an expected call of InvestLoan.
func (mr *MockLoanServiceMockRecorder) InvestLoan(ctx, loanInvestRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvestLoan", reflect.TypeOf((*MockLoanService)(nil).InvestLoan), ctx, loanInvestRequest)
}

// UpdateLoan mocks base method.
func (m *MockLoanService) UpdateLoan(ctx context.Context, loanStatusRequest entity.LoanUpdateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoan", ctx, loanStatusRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLoan indicates an expected call of UpdateLoan.
func (mr *MockLoanServiceMockRecorder) UpdateLoan(ctx, loanStatusRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoan", reflect.TypeOf((*MockLoanService)(nil).UpdateLoan), ctx, loanStatusRequest)
}

// MockLoanRepo is a mock of LoanRepo interface.
type MockLoanRepo struct {
	ctrl     *gomock.Controller
	recorder *MockLoanRepoMockRecorder
}

// MockLoanRepoMockRecorder is the mock recorder for MockLoanRepo.
type MockLoanRepoMockRecorder struct {
	mock *MockLoanRepo
}

// NewMockLoanRepo creates a new mock instance.
func NewMockLoanRepo(ctrl *gomock.Controller) *MockLoanRepo {
	mock := &MockLoanRepo{ctrl: ctrl}
	mock.recorder = &MockLoanRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoanRepo) EXPECT() *MockLoanRepoMockRecorder {
	return m.recorder
}

// AddLoanInvestments mocks base method.
func (m *MockLoanRepo) AddLoanInvestments(ctx context.Context, investment entity.LoanInvestment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLoanInvestments", ctx, investment)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLoanInvestments indicates an expected call of AddLoanInvestments.
func (mr *MockLoanRepoMockRecorder) AddLoanInvestments(ctx, investment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLoanInvestments", reflect.TypeOf((*MockLoanRepo)(nil).AddLoanInvestments), ctx, investment)
}

// DisburseLoan mocks base method.
func (m *MockLoanRepo) DisburseLoan(ctx context.Context, loan *entity.Loan, staffID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisburseLoan", ctx, loan, staffID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisburseLoan indicates an expected call of DisburseLoan.
func (mr *MockLoanRepoMockRecorder) DisburseLoan(ctx, loan, staffID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisburseLoan", reflect.TypeOf((*MockLoanRepo)(nil).DisburseLoan), ctx, loan, staffID)
}

// GetLoanByID mocks base method.
func (m *MockLoanRepo) GetLoanByID(ctx context.Context, loanID uuid.UUID) (*entity.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanByID", ctx, loanID)
	ret0, _ := ret[0].(*entity.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanByID indicates an expected call of GetLoanByID.
func (mr *MockLoanRepoMockRecorder) GetLoanByID(ctx, loanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanByID", reflect.TypeOf((*MockLoanRepo)(nil).GetLoanByID), ctx, loanID)
}

// InsertLoan mocks base method.
func (m *MockLoanRepo) InsertLoan(ctx context.Context, loan *entity.Loan) (*entity.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLoan", ctx, loan)
	ret0, _ := ret[0].(*entity.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertLoan indicates an expected call of InsertLoan.
func (mr *MockLoanRepoMockRecorder) InsertLoan(ctx, loan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLoan", reflect.TypeOf((*MockLoanRepo)(nil).InsertLoan), ctx, loan)
}

// UpdateLoanStatus mocks base method.
func (m *MockLoanRepo) UpdateLoanStatus(ctx context.Context, loan *entity.Loan, staffID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoanStatus", ctx, loan, staffID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLoanStatus indicates an expected call of UpdateLoanStatus.
func (mr *MockLoanRepoMockRecorder) UpdateLoanStatus(ctx, loan, staffID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoanStatus", reflect.TypeOf((*MockLoanRepo)(nil).UpdateLoanStatus), ctx, loan, staffID)
}
